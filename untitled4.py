# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uB0vfF-3oAjwBhI-J_Ay4pP4x_ZKUGEi
"""

def fcfs_scheduling(processes):
    # Sort processes by arrival time
    processes.sort(key=lambda x: x['arrival'])

    time = 0
    for process in processes:
        if time < process['arrival']:
            time = process['arrival']
        process['completion'] = time + process['burst']
        time = process['completion']
        process['turnaround'] = process['completion'] - process['arrival']
        process['waiting'] = process['turnaround'] - process['burst']

    print("FCFS Scheduling:")
    print("PID\tAT\tBT\tCT\tTAT\tWT")
    for p in processes:
        print(f"{p['pid']}\t{p['arrival']}\t{p['burst']}\t{p['completion']}\t{p['turnaround']}\t{p['waiting']}")

# Input from notebook
fcfs_processes = [
    {'pid': 'P0', 'arrival': 0, 'burst': 4},
    {'pid': 'P1', 'arrival': 2, 'burst': 3},
    {'pid': 'P2', 'arrival': 3, 'burst': 1},
    {'pid': 'P3', 'arrival': 5, 'burst': 2}
]

fcfs_scheduling(fcfs_processes)



def sjf_scheduling(processes):
    n = len(processes)
    time = 0
    completed = 0
    is_completed = [False] * n
    result = []

    while completed != n:
        idx = -1
        min_burst = float('inf')
        for i in range(n):
            if processes[i]['arrival'] <= time and not is_completed[i]:
                if processes[i]['burst'] < min_burst:
                    min_burst = processes[i]['burst']
                    idx = i
                elif processes[i]['burst'] == min_burst:
                    if processes[i]['arrival'] < processes[idx]['arrival']:
                        idx = i

        if idx != -1:
            processes[idx]['completion'] = time + processes[idx]['burst']
            processes[idx]['turnaround'] = processes[idx]['completion'] - processes[idx]['arrival']
            processes[idx]['waiting'] = processes[idx]['turnaround'] - processes[idx]['burst']
            time = processes[idx]['completion']
            is_completed[idx] = True
            completed += 1
        else:
            time += 1  # idle time

    print("\nSJF Scheduling:")
    print("PID\tAT\tBT\tCT\tTAT\tWT")
    for p in processes:
        print(f"{p['pid']}\t{p['arrival']}\t{p['burst']}\t{p['completion']}\t{p['turnaround']}\t{p['waiting']}")

# Input from notebook
sjf_processes = [
    {'pid': 'P1', 'arrival': 0, 'burst': 12},
    {'pid': 'P2', 'arrival': 2, 'burst': 4},
    {'pid': 'P3', 'arrival': 3, 'burst': 6},
    {'pid': 'P4', 'arrival': 8, 'burst': 5}
]

sjf_scheduling(sjf_processes)